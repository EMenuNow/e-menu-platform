<% content_for :js do %>


<script type="text/javascript">
  // $(function(){

  ITEMS = []
  PRICE = 0
  var stripe = Stripe('<%=@publish_stripe_api_key%>');
  var elements = stripe.elements();

  // Custom styling can be passed to options when creating an Element.
  // (Note that this demo uses a wider set of styles than the guide below.)
  var style = {
    base: {
      color: '#32325d',
      // lineHeight: '18px',
      fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
      fontSmoothing: 'antialiased',
      fontSize: '16px',
      '::placeholder': {
        color: '#aab7c4'
      }
    },
    invalid: {
      color: '#fa755a',
      iconColor: '#fa755a'
    }
  };

  // Create an instance of the card Element.
  var card = elements.create('card', {
    style: style
  });

  // Add an instance of the card Element into the `card-element` <div>.
  card.mount('#card-element');

  // Handle real-time validation errors from the card Element.
  card.addEventListener('change', function(event) {
    $("#submit-payment-button").attr('disabled', false);
    var displayError = document.getElementById('card-errors');
    if (event.error) {
      displayError.textContent = event.error.message;
      $('#card-errors').removeClass("invisible");
      $("#please-wait").addClass("invisible");
      $("#main-payment-form").removeClass("invisible");
    } else {
      displayError.textContent = '';
      $('#card-errors').addClass("invisible");
      $("#submit-payment-button").removeClass("invisible");


    }
  });


  card.on('change', ({
    error
  }) => {
    const displayError = document.getElementById('card-errors');
    if (error) {
      displayError.textContent = error.message;
    } else {
      displayError.textContent = '';
    }
  });

  // Handle form submission.
  //  var form = document.getElementById('payment-form');
  //console.log('Create the Form')

  clientSecret = '<%=@payment_intent.client_secret%>'
  var form = document.getElementById('payment-form');

  form.addEventListener('submit', function(ev) {

    $("#main-payment-form").addClass("invisible");
    $("#please-wait").removeClass("invisible");

    //  console.log('PAYMENT FORM TRGGERED');
    ev.preventDefault();
    stripe.confirmCardPayment(clientSecret, {
      payment_method: {
        card: card,
        //      billing_details: {
        //        name: 'Jenny Rosen'
        //      }
      }
    }).then(function(result) {
      if (result.error) {
        // Show error to your customer (e.g., insufficient funds)
        //     console.log(result.error.message);
        $('#card-errors').removeClass("invisible")
        $('#card-errors').html(result.error.message)
        $("#submit-payment-button").removeClass("invisible");
        $("#main-payment-form").removeClass("invisible");
        $("#please-wait").addClass("invisible");
        //      $("#main-payment-form").removeClass("invisible");
      } else {
        // The payment has been processed!
        if (result.paymentIntent.status === 'succeeded') {
          //       console.log('PAYMENT SUCCESS')
          //       console.log(result)
          //      console.log(result.paymentIntent)
          $('#stripe_success_token').val(JSON.stringify(result.paymentIntent));
          $('#payment-form-success').submit()

          // Show a success message to your customer
          // There's a risk of the customer closing the window before callback
          // execution. Set up a webhook or plugin to listen for the
          // payment_intent.succeeded event that handles any business critical
          // post-payment actions.
        }
      }
    });
  });

  //    form.addEventListener('submit', function(event) {
  //      event.preventDefault();
  //      stripe.createToken(card).then(function(result) {
  //        if (result.error) {
  //          // Inform the user if there was an error.
  //          var errorElement = document.getElementById('card-errors');
  //          errorElement.textContent = result.error.message;
  //          $('#card-errors').removeClass("invisible")
  //          $("#please-wait").addClass("invisible");
  //          $("#main-payment-form").removeClass("invisible");
  //        } else {
  //          // Send the token to your server.
  //          stripeTokenHandler(result.token);
  //        }
  //      });
  //    });

  // Submit the form with the token ID.
  function stripeTokenHandler(token) {
    // Insert the token ID into the form so it gets submitted to the server
    var form = document.getElementById('payment-form');
    var hiddenInput = document.createElement('input');
    hiddenInput.setAttribute('type', 'hidden');
    hiddenInput.setAttribute('name', 'token');
    hiddenInput.setAttribute('value', token.id);
    form.appendChild(hiddenInput);
    //    console.log("AM I GETTING THIS FAR 1")
    //   console.log(hiddenInput)
    // Submit the form
    form.submit();
  }


  // Stripe AP
  console.log("<%=stripe_path(@path)%>.json")
  // apple pay
  var paymentRequest = stripe.paymentRequest({
    country: 'GB',
    currency: '<%=@restaurant.currency_code%>',
    total: {
      label: '<%=@path%> charge',
      amount: <%= @payment_in_pence %>
    },
    requestPayerName: true,
    requestPayerEmail: true,
  });

  var prButton = elements.create('paymentRequestButton', {
    paymentRequest: paymentRequest,
  });


  //    console.log(paymentRequest)

  paymentRequest.on('paymentmethod', function(ev) {

    name = $('#name').val()
    collection_time = $('#collection_time').val()
    house_number = $('#house_number').val()
    street = $('#street').val()
    postcode = $('#postcode').val()
    telephone = $('#telephone').val()
    email = $('#email').val()
    delivery_fee = $('#delivery_fee').val()
    table_number = $('#table_number').val()
    delivery_collection_type = $('#service_type').val()

    // Confirm the PaymentIntent without handling potential next actions (yet).
    stripe.confirmCardPayment(
      clientSecret, {
        payment_method: ev.paymentMethod.id
      }, {
        handleActions: false
      }
    ).then(function(confirmResult) {
      if (confirmResult.error) {
        // Report to the browser that the payment failed, prompting it to
        // re-show the payment interface, or show an error message and close
        // the payment interface.
        ev.complete('fail');
      } else {
        // Report to the browser that the confirmation was successful, prompting
        // it to close the browser payment method collection interface.
        dataPayment = {
          apple_and_google: true,
          stripe_success_token: confirmResult.paymentIntent,
          token: clientSecret,
          price: <%= @total_payment * 100 %> ,
          items: [],
          collection_time: collection_time,
          name: name,
          telephone: telephone,
          service_type: delivery_collection_type,
          email: email,
          delivery_fee: delivery_fee,
          table_number: table_number,
          house_number: house_number,
          street: street,
          postcode: postcode
        }
        console.log(dataPayment)
        $.ajax({
          url: "<%=stripe_path(@path)%>.json",
          context: document.body,
          data: dataPayment,
          method: 'POST',
          mimeType: 'application/json',
        }).done(function(response) {
          console.log("RESPONSE OKOKOKOKOKOK")
          ev.complete('success');
          window.location.replace('<%= @redirect_domain%>' + response.path)
        });



        // Check if the PaymentIntent requires any actions and if so let Stripe.js
        // handle the flow. If using an API version older than "2019-02-11" instead
        // instead check for: `paymentIntent.status === "requires_source_action"`.
        if (confirmResult.paymentIntent.status === "requires_action") {
          // Let Stripe.js handle the rest of the payment flow.
          stripe.confirmCardPayment(clientSecret).then(function(result) {
            if (result.error) {
              // The payment failed -- ask your customer for a new payment method.
            } else {
              // The payment has succeeded.
            }
          });
        } else {
          // The payment has succeeded.
        }
      }
    });
  });





  // paymentRequest.on('token', function(ev) {
  //      name = $('#name').val()
  //      collection_time = $('#collection_time').val()
  //      house_number = $('#house_number').val()
  //      street = $('#street').val()
  //      postcode = $('#postcode').val()
  //      telephone = $('#telephone').val()
  //      email = $('#email').val()
  //      delivery_fee = $('#delivery_fee').val()
  //      table_number = $('#table_number').val()
  //      delivery_collection_type = $('#service_type').val()
  //
  //
  //
  //      $.ajax({
  //        url: "<%=stripe_path(@path)%>.json",
  //        context: document.body,
  //        data: {token: ev.token.id, price: <%=@total_payment*100%>, items: [], collection_time: collection_time, name: name, telephone: telephone, service_type: delivery_collection_type, email: email, delivery_fee: delivery_fee, table_number: table_number, house_number: house_number, street: street, postcode: postcode}, 
  //        method: 'POST',
  //        mimeType:'application/json',
  //      }).done(function(response) {
  //        console.log("RESPONSE OKOKOKOKOKOK")
  //        ev.complete('success');
  //        window.location.replace('<%= @redirect_domain%>' + response.path)
  //      });
  //      
  //    });









  // Check the availability of the Payment Request API first.
  paymentRequest.canMakePayment().then(function(result) {
    if (result) {
      prButton.mount('#payment-request-button');
    } else {
      document.getElementById('payment-request-button').style.display = 'none';
    }
  });
  // Finish stripe AP


  // });
</script>



<% end %>

<div class='container-fluid pb-2 bg-dark '>
  <div class='container'>



    <div class="row bg-dark pt-5">
      <div class='col text-center text-light'>
        <h1>PAYMENT</h1>
        <h2><%= number_to_currency(@total_payment.to_f, unit: @restaurant.currency_symbol) %></h2>
        <%#=@stripe%>
      </div>
    </div>




    <script src="https://js.stripe.com/v3/"></script>
    <div class="row   justify-content-center">
      <div class="col-sm-12 col-md-6 m-2 text-center">
        <div id="please-wait" class="invisible">
          <h3 class="text-light">Please Wait</h3>
          <div class="progress">
            <div class="progress-bar progress-bar-striped  progress-bar-animated bg-warning" role="progressbar" style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
          </div>
        </div>
        <div id='main-payment-form'>
          <form method="post" id="payment-form">


            <div class="row bg-dark">
              <div class='col'>
                <div id="payment-request-button" class='submit-payment '>
                  <!-- A Stripe Element will be inserted here. -->
                </div>
                <label for="card-element" class='submit-payment '>
                  <!-- Credit or debit card -->
                </label>
                <div id="card-element" class="border p-2 bg-light submit-payment ">
                  <!-- A Stripe Element will be inserted here. -->
                </div>
                <!-- Used to display form errors. -->
                <div id="card-errors" class='alert alert-danger invisible mt-2' role="alert"></div>
                <!--  <button  class="btn btn-warning mt-2 submit-payment mb-3 ">Submit Payment</button> -->
                <%= submit_tag "Submit Payment", class: 'btn btn-primary btn-block mt-2 submit-payment mb-3', id: 'submit-payment-button'  %>
              </div>
            </div>
          </form>
          <p class=text-light><strong class=text-danger>*</strong> Required Fields</p>
          <%=link_to "#{@restaurant.name} Menu", restaurant_path_path(@path), class: 'btn btn-warning'%>
        </div>
      </div>
    </div>


  </div>
</div>
<form method="post" id="payment-form-success" action="<%=stripe_path(@path)%>">
  <%= hidden_field_tag :price, (@checkout_service.total_payment*100).to_f %>
  <%= hidden_field_tag :total, @checkout_service.total_payment %>
  <%= hidden_field_tag :service_type, @checkout_service.service_type %>
  <%= hidden_field_tag :collection_time, @checkout_service.collection_time %>
  <%= hidden_field_tag :table_number, @checkout_service.table_number %>
  <%= hidden_field_tag :name, @checkout_service.name %>
  <%= hidden_field_tag :telephone, @checkout_service.telephone %>
  <%= hidden_field_tag :email, @checkout_service.email %>
  <%= hidden_field_tag :house_number, @checkout_service.house_number %>
  <%= hidden_field_tag :street, @checkout_service.street %>
  <%= hidden_field_tag :postcode, @checkout_service.postcode %>
  <%= hidden_field_tag :basket, @checkout_service.basket %>
  <%= hidden_field_tag :delivery_fee, @checkout_service.delivery_fee %>
  <%= hidden_field_tag :stripe_success_token %>
</form>