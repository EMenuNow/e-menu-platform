
<% content_for :js do %>


<script type="text/javascript">


	// $(function(){

    ITEMS = []
    PRICE = 0
	
    var stripe = Stripe('<%=@publish_stripe_api_key%>');
    var elements = stripe.elements();

    // Custom styling can be passed to options when creating an Element.
    // (Note that this demo uses a wider set of styles than the guide below.)
    var style = {
      base: {
        color: '#32325d',
        // lineHeight: '18px',
        fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
        fontSmoothing: 'antialiased',
        fontSize: '16px',
        '::placeholder': {
          color: '#aab7c4'
        }
      },
      invalid: {
        color: '#fa755a',
        iconColor: '#fa755a'
      }
    };

    // Create an instance of the card Element.
    var card = elements.create('card', {style: style});

    // Add an instance of the card Element into the `card-element` <div>.
    card.mount('#card-element');

    // Handle real-time validation errors from the card Element.
    card.addEventListener('change', function(event) {
      var displayError = document.getElementById('card-errors');
      if (event.error) {
        displayError.textContent = event.error.message;
        $('#card-errors').removeClass("invisible");
        $("#please-wait").addClass("invisible");
        $("#main-payment-form").removeClass("invisible");
      } else {
        displayError.textContent = '';
        $('#card-errors').addClass("invisible");

      }
    });

    // Handle form submission.
    var form = document.getElementById('payment-form');
    console.log('Create the Form')
    form.addEventListener('submit', function(event) {
      event.preventDefault();

      stripe.createToken(card).then(function(result) {
        if (result.error) {
          // Inform the user if there was an error.
          var errorElement = document.getElementById('card-errors');
          errorElement.textContent = result.error.message;
          $('#card-errors').removeClass("invisible")
          $("#please-wait").addClass("invisible");
          $("#main-payment-form").removeClass("invisible");
        } else {
          // Send the token to your server.
          stripeTokenHandler(result.token);
        }
      });
    });

    // Submit the form with the token ID.
    function stripeTokenHandler(token) {
      // Insert the token ID into the form so it gets submitted to the server
      var form = document.getElementById('payment-form');
      var hiddenInput = document.createElement('input');
      hiddenInput.setAttribute('type', 'hidden');
      hiddenInput.setAttribute('name', 'token');
      hiddenInput.setAttribute('value', token.id);
      form.appendChild(hiddenInput);
      console.log("AM I GETTING THIS FAR 1")
      console.log(hiddenInput)
      // Submit the form
      form.submit();
    }




    $('#name').change(function() {   
      val = $(this).val()
      // alert('val')
      if (val.length < 1){
        alert("Please enter a name");
        $('.submit-payment').addClass('invisible')
      } else {
        console.log('Show Submit Button')
        $('.submit-payment').removeClass('invisible')
      }
    });





  // Stripe AP

    console.log("<%=stripe_path(@path)%>.json")
    // apple pay
    var paymentRequest = stripe.paymentRequest({
      country: 'GB',
      currency: 'gbp',
      total: {
        label: 'e-me.nu payment',
        amount: <%=@basket_item_total%>,
      },
      requestPayerName: true,
      requestPayerEmail: true,
    });


    var prButton = elements.create('paymentRequestButton', {
      paymentRequest: paymentRequest,
    });
    console.log(paymentRequest)

    paymentRequest.on('token', function(ev) {
      // Send the token to your server to charge it!
      
      name = $('#name').val()
      collection_time = $('#collection_time').val()
      address = $('#address').val()
      
$.ajax({
  url: "<%=stripe_path(@path)%>.json",
  context: document.body,
  data: {token: ev.token.id, price: <%=@basket_item_total%>, items: [], collection_time: collection_time, name: name, address: address}, 
  method: 'POST',
  mimeType:'application/json',
}).done(function(response) {
  console.log("RESPONSE OKOKOKOKOKOK")
  console.log(response)
  ev.complete('success');
  window.location.replace('https://eat.emenunow.com' + response.path)
});
      
    });
    // Check the availability of the Payment Request API first.
    paymentRequest.canMakePayment().then(function(result) {
      if (result) {
        prButton.mount('#payment-request-button');
      } else {
        document.getElementById('payment-request-button').style.display = 'none';
      }
    });
// Finish stripe AP









// });


$(function(){



  $('.type-button').click(function(){
    type = $(this).data('type')
    $('#delivery-collection-type').val(type)

  if (type == 'delivery'){
    $('#collection-button').removeClass('btn-primary').addClass('btn-outline-secondary')
    $('#delivery-button').removeClass('btn-outline-secondary').addClass('btn-primary')
    $('#address-form').removeClass('invisible');
  } else {
    $('#delivery-button').removeClass('btn-primary').addClass('btn-outline-secondary')
    $('#collection-button').removeClass('btn-outline-secondary').addClass('btn-primary')
    $('#address-form').addClass('invisible');
  }

  
  });


});



</script>



    <script>
// This sample uses the Autocomplete widget to help the user select a
// place, then it retrieves the address components associated with that
// place, and then it populates the form fields with those details.
// This sample requires the Places library. Include the libraries=places
// parameter when you first load the API. For example:
// <script
// src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

var placeSearch, autocomplete;

var componentForm = {
  street_number: 'short_name',
  route: 'long_name',
  locality: 'long_name',
  administrative_area_level_1: 'short_name',
  country: 'long_name',
  postal_code: 'short_name'
};

function initAutocomplete() {
  // Create the autocomplete object, restricting the search predictions to
  // geographical location types.
  autocomplete = new google.maps.places.Autocomplete(
      document.getElementById('autocomplete'), {types: ['geocode']});

  // Avoid paying for data that you don't need by restricting the set of
  // place fields that are returned to just the address components.
  autocomplete.setFields(['address_component']);

  // When the user selects an address from the drop-down, populate the
  // address fields in the form.
  autocomplete.addListener('place_changed', fillInAddress);
}

function fillInAddress() {
  // Get the place details from the autocomplete object.
  var place = autocomplete.getPlace();

  for (var component in componentForm) {
    document.getElementById(component).value = '';
    document.getElementById(component).disabled = false;
  }

  // Get each component of the address from the place details,
  // and then fill-in the corresponding field on the form.
  for (var i = 0; i < place.address_components.length; i++) {
    var addressType = place.address_components[i].types[0];
    if (componentForm[addressType]) {
      var val = place.address_components[i][componentForm[addressType]];
      document.getElementById(addressType).value = val;
        address = $('#street_number').val() + ', ' + $('#route').val() + ', ' + $('#locality').val() + ', ' + $('#postal_code').val() + ', ' + $('#administrative_area_level_1').val() + ', '  + $('#country').val()
        $('#address').val(address)
    }
  }
}

// Bias the autocomplete object to the user's geographical location,
// as supplied by the browser's 'navigator.geolocation' object.
function geolocate() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {
      var geolocation = {
        lat: position.coords.latitude,
        lng: position.coords.longitude
      };
      var circle = new google.maps.Circle(
          {center: geolocation, radius: position.coords.accuracy});
      autocomplete.setBounds(circle.getBounds());
    });
  }
}
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAR-te5_0nHExQIncpxM5Ra8RhSdXrzwhk&libraries=places&callback=initAutocomplete"
        async defer></script>


<% end %>


<div class='container-fluid pb-2' ><!--  style="background: url('/images/restaurant/thesauce/main-bg2.jpg') no-repeat fixed center;" -->
  <div class='container'>

    <div class="row  justify-content-center ">
      <div class='col-sm-12 col-md-12 col-lg-12'>
        <div class="row">
          <div class='col text-center'>
              <%#= image_tag @restaurant.logo.variant(resize_to_limit: [300, 300]) if @restaurant.logo.attached? %>
          </div>
        </div>
      </div>
    </div>

    <div class="row bg-dark">
      <div class='col text-center text-light'>
          <h1>PAYMENT</h1>
          <h2><%= number_to_currency(@basket_item_total.to_f / 100.to_f, unit: 'Â£') %></h2>
          <%#=@stripe%>
      </div>
    </div>




    <script src="https://js.stripe.com/v3/"></script>
      <div class="row bg-dark  justify-content-center ">
        <div class="col-sm-12 col-md-6 m-2 text-center">
          <div id="please-wait" class="invisible">
            <h3 class="text-light">Please Wait</h3>
            <div class="progress">
              <div class="progress-bar progress-bar-striped  progress-bar-animated bg-warning" role="progressbar" style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
          </div>
          <div id='main-payment-form'>
          <form action="<%=stripe_path(@path)%>" method="post" id="payment-form">

            <div class="row bg-dark">
              <div class='col-sm-12 col-md-6 text-center text-light pb-2'>
                    <%= link_to 'Collection', '#',  class: "btn btn-primary type-button", 'data-type': 'collection', id: 'collection-button' %>
                    <%= link_to 'Delivery', '#',  class: "btn btn-outline-secondary type-button", 'data-type': 'delivery', id: 'delivery-button'  %>
                    <%= hidden_field_tag :type,  'collection', id: 'delivery-collection-type', class: "border p-2 bg-light" %>
              </div>
              <div class='col-sm-12 col-md-6 text-center text-light'>

                    <%= select_tag :collection_time, options_for_select(@delivery_time_options), { class: "border p-2 bg-light form-control"} %>
              </div>



            </div>
            <div class="row bg-dark">
              <div class='col-sm-12 col-md-6 text-left text-light form-group'>
                    <%= label_tag :name %>
                    <%= text_field_tag :name,  nil, class: "border p-2 bg-light form-control" %>
              </div>
              <div class='col-sm-12 col-md-6 text-left text-light form-group'>
                    <%= label_tag :telephone %>
                    <%= text_field_tag :telephone,  nil, class: "border p-2 bg-light form-control" %>
              </div>
            </div>

            <div id='address-form' class="row bg-dark invisible">
              <div class='col text-left text-light form-group'>
   <%= label_tag :address %>
    <div id="locationField">
      <input id="autocomplete"
             placeholder="Enter your address"
             onFocus="geolocate()"
             type="text" 
             name='address'
             class='form-control'/>
    </div>


                 
                    <%= hidden_field_tag :address,  nil, class: "border p-2 bg-light" %>

        <input type='hidden' class="field" id="street_number" disabled="true"/>
        <input type='hidden' class="field" id="route" disabled="true"/>
        <input type='hidden' class="field" id="locality" disabled="true"/>
        <input type='hidden' class="field" id="administrative_area_level_1" disabled="true"/>
        <input type='hidden' class="field" id="postal_code" disabled="true"/>
        <input type='hidden' class="field" id="country" disabled="true"/>





              </div>
            </div>


            <div class="row bg-dark">
              <div class='col'>

            <div id="payment-request-button" class='submit-payment invisible'>
              <!-- A Stripe Element will be inserted here. -->
            </div>


                <%= hidden_field_tag :price, @basket_item_total %>
                <label for="card-element" class='submit-payment invisible'>
                  <!-- Credit or debit card -->
                </label>
                <div id="card-element" class="border p-2 bg-light submit-payment invisible">
                  <!-- A Stripe Element will be inserted here. -->
                </div>
                <!-- Used to display form errors. -->
                <div id="card-errors" class='alert alert-danger invisible mt-2' role="alert"></div>
                <button  class="btn btn-warning mt-2 submit-payment mb-3 invisible">Submit Payment</button>
              </div>
            </div>
          </form>
                <%=link_to "#{@restaurant.name} Menu", restaurant_path_path(@path), class: 'btn btn-warning'%>


          </div>
        </div>
      </div>




  </div>
</div>






